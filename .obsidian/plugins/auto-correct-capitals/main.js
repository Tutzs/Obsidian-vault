/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoCorrectPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AutoCorrectPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Loading AutoCorrectPlugin");
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        const punctuation = [" ", ".", ",", ";", ":", "!", "?", "\n"];
        const doc = editor.getDoc();
        const cursor = doc.getCursor();
        const line = doc.getLine(cursor.line);
        const lineUpToCursor = line.substring(0, cursor.ch);
        const lastChar = lineUpToCursor.slice(-1);
        let lastWordMatch;
        if (punctuation.includes(lastChar)) {
          if (lineUpToCursor.length > 0) {
            lastWordMatch = lineUpToCursor.match(/\b\w+\W*$/);
          }
          if (lastWordMatch) {
            const lastWord = lastWordMatch[0];
            if (/\b[A-Z]{2}[a-z]+\b/.test(lastWord)) {
              let uppercaseCount = 0;
              for (let i = 0; i < lastWord.length; i++) {
                const char = lastWord[i];
                if (char === char.toUpperCase() && char !== char.toLowerCase()) {
                  uppercaseCount++;
                  if (uppercaseCount === 2) {
                    const start = cursor.ch - lastWord.length + i;
                    const end = start + 1;
                    doc.replaceRange(char.toLowerCase(), { line: cursor.line, ch: start }, { line: cursor.line, ch: end });
                    return;
                  }
                }
              }
            }
          }
        }
      })
    );
  }
  onunload() {
    console.log("Unloading AutoCorrectPlugin");
  }
};


/* nosourcemap */